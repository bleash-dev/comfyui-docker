name: Build and Deploy ComfyUI Docker Image

on:
  push:
    branches: [ main, dev]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: comfyui-docker
  PUBLIC_REGISTRY_ALIAS: p1c2v8t9  # Update this to your ECR public registry alias

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: "prod"

    permissions:
      id-token: write
      contents: read

    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.GH_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Amazon ECR Public
      uses: docker/login-action@v3
      with:
        registry: public.ecr.aws

    - name: Create ECR repository if it doesn't exist
      run: |
        echo "🔍 Checking if ECR repository exists..."
        REPO_NAME="${{ env.IMAGE_NAME }}${{ github.ref == 'refs/heads/dev' && '-dev' || '' }}"
        echo "Repository name: $REPO_NAME"
        
        # First, verify we can access ECR
        echo "🔐 Testing ECR access..."
        aws ecr-public describe-registries --region us-east-1 || {
          echo "❌ Cannot access ECR public registries. Check AWS credentials and permissions."
          exit 1
        }
        
        # Check if repository exists
        if ! aws ecr-public describe-repositories --repository-names "$REPO_NAME" --region us-east-1 >/dev/null 2>&1; then
          echo "📝 Creating ECR Public repository: $REPO_NAME"
          aws ecr-public create-repository \
            --repository-name "$REPO_NAME" \
            --region us-east-1
          
          echo "✅ Repository created successfully"
          
          # Verify the repository was created
          aws ecr-public describe-repositories --repository-names "$REPO_NAME" --region us-east-1
        else
          echo "✅ ECR repository already exists: $REPO_NAME"
        fi

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          public.ecr.aws/${{ env.PUBLIC_REGISTRY_ALIAS }}/${{ env.IMAGE_NAME }}${{ github.ref == 'refs/heads/dev' && '-dev' || '' }}
        tags: |
          type=sha,prefix=${{ github.ref_name }}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=dev-latest,enable=${{ github.ref == 'refs/heads/dev' }}

    - name: Build and push Docker image to ECR Public
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=3.10
          PYTORCH_VERSION=2.4.0
          COMFYUI_VERSION=master
        outputs: |
          type=image,name=target
          
    - name: Set image URI output
      id: image-uri
      run: |
        REPO_NAME="${{ env.IMAGE_NAME }}${{ github.ref == 'refs/heads/dev' && '-dev' || '' }}"
        TAG="${{ github.ref == 'refs/heads/main' && 'latest' || 'dev-latest' }}"
        IMAGE_URI="public.ecr.aws/${{ env.PUBLIC_REGISTRY_ALIAS }}/${REPO_NAME}:${TAG}"
        echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
        echo "📦 Image URI: ${IMAGE_URI}"

  create-ami:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: "prod"
    if: github.event_name != 'pull_request'

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.GH_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get latest Ubuntu AMI
      id: ubuntu-ami
      run: |
        AMI_ID=$(aws ec2 describe-images \
        --owners 099720109477 \
        --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
            "Name=state,Values=available" \
        --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
        --output text \
        --region us-east-1)
        echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT
        echo "🖥️ Base Ubuntu AMI: $AMI_ID"

    - name: Upload scripts to S3
      run: |
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        S3_PREFIX="s3://viral-comm-api-ec2-deployments-dev/comfy-docker/${ENVIRONMENT}"
        
        echo "📤 Uploading scripts to S3..."
        echo "S3 path: ${S3_PREFIX}"
        
        # Upload preparation scripts
        aws s3 cp scripts/prepare_ami.sh "${S3_PREFIX}/prepare_ami.sh" --region ${{ env.AWS_REGION }}
        aws s3 cp scripts/setup_cloudwatch.sh "${S3_PREFIX}/setup_cloudwatch.sh" --region ${{ env.AWS_REGION }}
        
        echo "✅ Scripts uploaded to S3"

    - name: Launch EC2 instance for AMI creation
      id: launch-instance
      timeout-minutes: 5
      run: |
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        INSTANCE_NAME="comfyui-ami-builder-${ENVIRONMENT}-$(date +%Y%m%d-%H%M%S)"
        
        echo "🚀 Launching EC2 instance for AMI creation..."
        echo "Environment: $ENVIRONMENT"
        echo "Instance name: $INSTANCE_NAME"
        
        # Create user data script
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        S3_PREFIX="s3://viral-comm-api-ec2-deployments-dev/comfy-docker/${ENVIRONMENT}"
        
        cat > user-data.sh << EOF
        #!/bin/bash
        set -e
        
        # Set environment variables
        export COMFYUI_DOCKER_IMAGE="${{ needs.build-and-push.outputs.image-uri }}"
        export DEBIAN_FRONTEND=noninteractive
        
        # Log everything
        exec > >(tee /var/log/user-data.log) 2>&1
        echo "Starting AMI preparation at \$(date)"
        
        # Update system
        apt-get update -y
        
        # Install required packages
        apt-get install -y awscli curl wget jq
        
        # Download scripts from S3
        echo "Downloading scripts from S3..."
        mkdir -p /scripts
        cd /scripts
        
        # Download prepare_ami.sh
        aws s3 cp "${S3_PREFIX}/prepare_ami.sh" prepare_ami.sh --region ${{ env.AWS_REGION }}
        chmod +x prepare_ami.sh
        
        # Download setup_cloudwatch.sh  
        aws s3 cp "${S3_PREFIX}/setup_cloudwatch.sh" setup_cloudwatch.sh --region ${{ env.AWS_REGION }}
        chmod +x setup_cloudwatch.sh
        
        # Run the AMI preparation
        echo "Starting AMI preparation script..."
        export COMFYUI_DOCKER_IMAGE="${{ needs.build-and-push.outputs.image-uri }}"
        /scripts/prepare_ami.sh
        
        # Signal completion
        echo "AMI_PREPARATION_COMPLETE" > /tmp/ami_ready.txt
        echo "AMI preparation completed at \$(date)"
        EOF
        
        # Get available VPC and subnet
        echo "🔍 Finding available VPC and subnet..."
        VPC_ID=$(aws ec2 describe-vpcs \
          --filters "Name=is-default,Values=true" \
          --query 'Vpcs[0].VpcId' \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
        
        if [[ -z "$VPC_ID" || "$VPC_ID" == "None" ]]; then
          echo "No default VPC found, using any available VPC..."
          VPC_ID=$(aws ec2 describe-vpcs \
            --query 'Vpcs[0].VpcId' \
            --output text \
            --region ${{ env.AWS_REGION }})
        fi
        
        SUBNET_ID=$(aws ec2 describe-subnets \
          --filters "Name=vpc-id,Values=${VPC_ID}" \
          --query 'Subnets[0].SubnetId' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "Using VPC: $VPC_ID"
        echo "Using Subnet: $SUBNET_ID"
        
        # Create IAM role for EC2 instance to access S3
        echo "🔐 Creating IAM role for EC2 instance..."
        ROLE_NAME="comfyui-ami-builder-role-$(date +%s)"
        
        # Create trust policy
        cat > trust-policy.json << 'TRUST_EOF'
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        TRUST_EOF
        
        # Create IAM role
        aws iam create-role \
          --role-name "$ROLE_NAME" \
          --assume-role-policy-document file://trust-policy.json \
          --region ${{ env.AWS_REGION }}
        
        # Attach S3 read-only policy
        aws iam attach-role-policy \
          --role-name "$ROLE_NAME" \
          --policy-arn "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess" \
          --region ${{ env.AWS_REGION }}
        
        # Create instance profile
        aws iam create-instance-profile \
          --instance-profile-name "$ROLE_NAME" \
          --region ${{ env.AWS_REGION }}
        
        # Add role to instance profile
        aws iam add-role-to-instance-profile \
          --instance-profile-name "$ROLE_NAME" \
          --role-name "$ROLE_NAME" \
          --region ${{ env.AWS_REGION }}
        
        # Wait a moment for IAM to propagate
        sleep 10
        
        echo "✅ IAM role created: $ROLE_NAME"
        
        # Launch instance with VPC configuration and IAM role
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ steps.ubuntu-ami.outputs.ami-id }} \
          --instance-type t3.large \
          --subnet-id $SUBNET_ID \
          --associate-public-ip-address \
          --iam-instance-profile Name="$ROLE_NAME" \
          --user-data file://user-data.sh \
          --region ${{ env.AWS_REGION }} \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${INSTANCE_NAME}},{Key=Environment,Value=${ENVIRONMENT}},{Key=Purpose,Value=AMI-Builder},{Key=AutoTerminate,Value=true},{Key=IAMRole,Value=${ROLE_NAME}}]" \
          --query 'Instances[0].InstanceId' \
          --output text)
        
        echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "iam-role=$ROLE_NAME" >> $GITHUB_OUTPUT
        echo "🚀 Launched instance: $INSTANCE_ID"
        echo "⚠️ Instance will be automatically terminated after AMI creation"
        echo "💡 Using VPC: $VPC_ID, Subnet: $SUBNET_ID, IAM Role: $ROLE_NAME"

    - name: Wait for instance setup completion
      timeout-minutes: 25
      run: |
        INSTANCE_ID="${{ steps.launch-instance.outputs.instance-id }}"
        echo "⏳ Waiting for instance setup to complete..."
        
        # Wait for instance to be running
        echo "🔄 Waiting for instance to be running..."
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
        echo "✅ Instance is running"
        
        # Wait for user-data script to complete (estimated time: 20 minutes)
        echo "⏳ Waiting for AMI preparation to complete (estimated 20 minutes)..."
        echo "🔧 During this time, the instance is:"
        echo "   1. Updating the system"
        echo "   2. Installing Docker and dependencies"
        echo "   3. Pulling and configuring the ComfyUI Docker image"
        echo "   4. Setting up CloudWatch monitoring"
        echo "   5. Configuring the environment"
        
        # Wait in intervals with status updates
        for i in {1..20}; do
          echo "📊 Progress: $((i*5))% complete ($(date))"
          sleep 60
        done
        
        echo "✅ AMI preparation should be complete"

    - name: Create AMI
      id: create-ami
      timeout-minutes: 10
      run: |
        INSTANCE_ID="${{ steps.launch-instance.outputs.instance-id }}"
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        AMI_NAME="comfyui-multitenant-${ENVIRONMENT}-$(date +%Y%m%d-%H%M%S)"
        
        echo "📸 Creating AMI from instance: $INSTANCE_ID"
        
        # Stop the instance before creating AMI
        aws ec2 stop-instances --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
        aws ec2 wait instance-stopped --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
        
        # Create AMI
        AMI_ID=$(aws ec2 create-image \
          --instance-id $INSTANCE_ID \
          --name "$AMI_NAME" \
          --description "ComfyUI Multi-Tenant AMI for $ENVIRONMENT environment with image ${{ needs.build-and-push.outputs.image-uri }}" \
          --region ${{ env.AWS_REGION }} \
          --tag-specifications "ResourceType=image,Tags=[{Key=Name,Value=${AMI_NAME}},{Key=Environment,Value=${ENVIRONMENT}},{Key=DockerImage,Value=${{ needs.build-and-push.outputs.image-uri }}},{Key=Branch,Value=${{ github.ref_name }}}]" \
          --query 'ImageId' \
          --output text)
        
        echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT
        echo "✅ AMI created: $AMI_ID"

    - name: Wait for AMI to be available
      timeout-minutes: 15
      run: |
        AMI_ID="${{ steps.create-ami.outputs.ami-id }}"
        echo "⏳ Waiting for AMI to be available..."
        aws ec2 wait image-available --image-ids $AMI_ID --region ${{ env.AWS_REGION }}
        echo "✅ AMI is available: $AMI_ID"

    - name: Cleanup builder instance
      if: always()
      run: |
        INSTANCE_ID="${{ steps.launch-instance.outputs.instance-id }}"
        IAM_ROLE="${{ steps.launch-instance.outputs.iam-role }}"
        
        if [ -n "$INSTANCE_ID" ]; then
          echo "🧹 Terminating builder instance: $INSTANCE_ID"
          
          # Force terminate the instance
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }} || echo "⚠️ Instance may already be terminated"
          
          # Wait for termination to complete
          echo "⏳ Waiting for instance termination..."
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }} || echo "⚠️ Timeout waiting for termination"
          
          echo "✅ Builder instance cleanup completed"
        else
          echo "⚠️ No instance ID found to cleanup"
        fi
        
        # Clean up IAM role and instance profile
        if [ -n "$IAM_ROLE" ]; then
          echo "🧹 Cleaning up IAM role: $IAM_ROLE"
          
          # Remove role from instance profile
          aws iam remove-role-from-instance-profile \
            --instance-profile-name "$IAM_ROLE" \
            --role-name "$IAM_ROLE" \
            --region ${{ env.AWS_REGION }} || echo "⚠️ Role may already be removed"
          
          # Delete instance profile
          aws iam delete-instance-profile \
            --instance-profile-name "$IAM_ROLE" \
            --region ${{ env.AWS_REGION }} || echo "⚠️ Instance profile may already be deleted"
          
          # Detach policy from role
          aws iam detach-role-policy \
            --role-name "$IAM_ROLE" \
            --policy-arn "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess" \
            --region ${{ env.AWS_REGION }} || echo "⚠️ Policy may already be detached"
          
          # Delete role
          aws iam delete-role \
            --role-name "$IAM_ROLE" \
            --region ${{ env.AWS_REGION }} || echo "⚠️ Role may already be deleted"
          
          echo "✅ IAM role cleanup completed"
        else
          echo "⚠️ No IAM role found to cleanup"
        fi

    - name: Deployment Summary
      if: github.event_name != 'pull_request'
      run: |
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        
        echo "## 🚀 ComfyUI Multi-Tenant Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Docker Image" >> $GITHUB_STEP_SUMMARY
        echo "**Image URI:** \`${{ needs.build-and-push.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** Amazon ECR Public" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📀 AMI" >> $GITHUB_STEP_SUMMARY
        echo "**AMI ID:** \`${{ steps.create-ami.outputs.ami-id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** \`${ENVIRONMENT}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** \`${{ env.AWS_REGION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Usage" >> $GITHUB_STEP_SUMMARY
        echo "Launch EC2 instances from this AMI to run the multi-tenant ComfyUI system." >> $GITHUB_STEP_SUMMARY
        echo "The management server will be available on port 80." >> $GITHUB_STEP_SUMMARY