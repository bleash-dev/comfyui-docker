name: Build and Deploy ComfyUI Docker Image

on:
  push:
    branches: [ main, dev]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: comfyui-docker
  PUBLIC_REGISTRY_ALIAS: p1c2v8t9  # Update this to your ECR public registry alias

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: "prod"

    permissions:
      id-token: write
      contents: read

    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.GH_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Amazon ECR Public
      uses: docker/login-action@v3
      with:
        registry: public.ecr.aws

    - name: Create ECR repository if it doesn't exist
      run: |
        echo "üîç Checking if ECR repository exists..."
        REPO_NAME="${{ env.IMAGE_NAME }}${{ github.ref == 'refs/heads/dev' && '-dev' || '' }}"
        echo "Repository name: $REPO_NAME"
        
        # First, verify we can access ECR
        echo "üîê Testing ECR access..."
        aws ecr-public describe-registries --region us-east-1 || {
          echo "‚ùå Cannot access ECR public registries. Check AWS credentials and permissions."
          exit 1
        }
        
        # Check if repository exists
        if ! aws ecr-public describe-repositories --repository-names "$REPO_NAME" --region us-east-1 >/dev/null 2>&1; then
          echo "üìù Creating ECR Public repository: $REPO_NAME"
          aws ecr-public create-repository \
            --repository-name "$REPO_NAME" \
            --region us-east-1
          
          echo "‚úÖ Repository created successfully"
          
          # Verify the repository was created
          aws ecr-public describe-repositories --repository-names "$REPO_NAME" --region us-east-1
        else
          echo "‚úÖ ECR repository already exists: $REPO_NAME"
        fi

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          public.ecr.aws/${{ env.PUBLIC_REGISTRY_ALIAS }}/${{ env.IMAGE_NAME }}${{ github.ref == 'refs/heads/dev' && '-dev' || '' }}
        tags: |
          type=sha,prefix=${{ github.ref_name }}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=dev-latest,enable=${{ github.ref == 'refs/heads/dev' }}

    - name: Build and push Docker image to ECR Public
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=3.10
          PYTORCH_VERSION=2.4.0
          COMFYUI_VERSION=master
        outputs: |
          type=image,name=target
          
    - name: Set image URI output
      id: image-uri
      run: |
        REPO_NAME="${{ env.IMAGE_NAME }}${{ github.ref == 'refs/heads/dev' && '-dev' || '' }}"
        TAG="${{ github.ref == 'refs/heads/main' && 'latest' || 'dev-latest' }}"
        IMAGE_URI="public.ecr.aws/${{ env.PUBLIC_REGISTRY_ALIAS }}/${REPO_NAME}:${TAG}"
        echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
        echo "üì¶ Image URI: ${IMAGE_URI}"

  create-ami:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: "prod"
    if: github.event_name != 'pull_request'

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.GH_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get latest Ubuntu AMI
      id: ubuntu-ami
      run: |
        AMI_ID=$(aws ec2 describe-images \
        --owners 099720109477 \
        --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
            "Name=state,Values=available" \
        --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
        --output text \
        --region us-east-1)
        echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT
        echo "üñ•Ô∏è Base Ubuntu AMI: $AMI_ID"

    - name: Launch EC2 instance for AMI creation
      id: launch-instance
      timeout-minutes: 5
      run: |
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        INSTANCE_NAME="comfyui-ami-builder-${ENVIRONMENT}-$(date +%Y%m%d-%H%M%S)"
        
        echo "üöÄ Launching EC2 instance for AMI creation..."
        echo "Environment: $ENVIRONMENT"
        echo "Instance name: $INSTANCE_NAME"
        
        # Create user data script
        cat > user-data.sh << 'EOF'
        #!/bin/bash
        
        # Set environment variables
        export COMFYUI_DOCKER_IMAGE="${{ needs.build-and-push.outputs.image-uri }}"
        export DEBIAN_FRONTEND=noninteractive
        
        # Update system
        apt-get update -y
        
        # Install required packages
        apt-get install -y awscli curl wget jq
        
        # Copy scripts to the instance
        mkdir -p /scripts
        EOF
        
        # Add the prepare_ami.sh script content to user data
        echo 'cat > /scripts/prepare_ami.sh << '\''SCRIPT_EOF'\''' >> user-data.sh
        cat scripts/prepare_ami.sh >> user-data.sh
        echo 'SCRIPT_EOF' >> user-data.sh
        echo 'chmod +x /scripts/prepare_ami.sh' >> user-data.sh
        
        # Add the setup_cloudwatch.sh script
        echo 'cat > /scripts/setup_cloudwatch.sh << '\''SCRIPT_EOF'\''' >> user-data.sh
        cat scripts/setup_cloudwatch.sh >> user-data.sh
        echo 'SCRIPT_EOF' >> user-data.sh
        echo 'chmod +x /scripts/setup_cloudwatch.sh' >> user-data.sh
        
        # Run the AMI preparation
        echo 'export COMFYUI_DOCKER_IMAGE="${{ needs.build-and-push.outputs.image-uri }}"' >> user-data.sh
        echo '/scripts/prepare_ami.sh' >> user-data.sh
        
        # Signal completion
        echo 'echo "AMI_PREPARATION_COMPLETE" > /tmp/ami_ready.txt' >> user-data.sh
        
        # Launch instance with minimal configuration
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ steps.ubuntu-ami.outputs.ami-id }} \
          --instance-type t3.large \
          --user-data file://user-data.sh \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${INSTANCE_NAME}},{Key=Environment,Value=${ENVIRONMENT}},{Key=Purpose,Value=AMI-Builder},{Key=AutoTerminate,Value=true}]" \
          --query 'Instances[0].InstanceId' \
          --output text)
        
        echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "üöÄ Launched instance: $INSTANCE_ID"
        echo "‚ö†Ô∏è Instance will be automatically terminated after AMI creation"
        echo "üí° Using default VPC, security group, and no SSH key (not needed for AMI creation)"

    - name: Wait for instance setup completion
      timeout-minutes: 30
      run: |
        INSTANCE_ID="${{ steps.launch-instance.outputs.instance-id }}"
        echo "‚è≥ Waiting for instance setup to complete..."
        
        # Wait for instance to be running
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "‚úÖ Instance is running"
        
        # Wait for AMI preparation to complete (check for completion file)
        for i in {1..60}; do
          echo "ÔøΩ Checking AMI preparation status... (attempt $i/60)"
          
          # Check if the completion file exists
          if aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["test -f /tmp/ami_ready.txt && echo READY || echo NOT_READY"]' \
            --query 'Command.CommandId' \
            --output text > /tmp/command_id.txt 2>/dev/null; then
            
            COMMAND_ID=$(cat /tmp/command_id.txt)
            sleep 10
            
            RESULT=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --query 'StandardOutputContent' \
              --output text 2>/dev/null || echo "PENDING")
            
            if [[ "$RESULT" == *"READY"* ]]; then
              echo "‚úÖ AMI preparation completed!"
              break
            fi
          fi
          
          if [ $i -eq 60 ]; then
            echo "‚ùå Timeout waiting for AMI preparation"
            echo "üîç Checking instance status for debugging..."
            aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].State' || true
            exit 1
          fi
          
          sleep 30
        done

    - name: Create AMI
      id: create-ami
      timeout-minutes: 10
      run: |
        INSTANCE_ID="${{ steps.launch-instance.outputs.instance-id }}"
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        AMI_NAME="comfyui-multitenant-${ENVIRONMENT}-$(date +%Y%m%d-%H%M%S)"
        
        echo "üì∏ Creating AMI from instance: $INSTANCE_ID"
        
        # Stop the instance before creating AMI
        aws ec2 stop-instances --instance-ids $INSTANCE_ID
        aws ec2 wait instance-stopped --instance-ids $INSTANCE_ID
        
        # Create AMI
        AMI_ID=$(aws ec2 create-image \
          --instance-id $INSTANCE_ID \
          --name "$AMI_NAME" \
          --description "ComfyUI Multi-Tenant AMI for $ENVIRONMENT environment with image ${{ needs.build-and-push.outputs.image-uri }}" \
          --tag-specifications "ResourceType=image,Tags=[{Key=Name,Value=${AMI_NAME}},{Key=Environment,Value=${ENVIRONMENT}},{Key=DockerImage,Value=${{ needs.build-and-push.outputs.image-uri }}},{Key=Branch,Value=${{ github.ref_name }}}]" \
          --query 'ImageId' \
          --output text)
        
        echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT
        echo "‚úÖ AMI created: $AMI_ID"

    - name: Wait for AMI to be available
      timeout-minutes: 15
      run: |
        AMI_ID="${{ steps.create-ami.outputs.ami-id }}"
        echo "‚è≥ Waiting for AMI to be available..."
        aws ec2 wait image-available --image-ids $AMI_ID
        echo "‚úÖ AMI is available: $AMI_ID"

    - name: Cleanup builder instance
      if: always()
      run: |
        INSTANCE_ID="${{ steps.launch-instance.outputs.instance-id }}"
        if [ -n "$INSTANCE_ID" ]; then
          echo "üßπ Terminating builder instance: $INSTANCE_ID"
          
          # Force terminate the instance
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID || echo "‚ö†Ô∏è Instance may already be terminated"
          
          # Wait for termination to complete
          echo "‚è≥ Waiting for instance termination..."
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID || echo "‚ö†Ô∏è Timeout waiting for termination"
          
          echo "‚úÖ Builder instance cleanup completed"
        else
          echo "‚ö†Ô∏è No instance ID found to cleanup"
        fi

    - name: Deployment Summary
      if: github.event_name != 'pull_request'
      run: |
        ENVIRONMENT="${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
        
        echo "## üöÄ ComfyUI Multi-Tenant Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üê≥ Docker Image" >> $GITHUB_STEP_SUMMARY
        echo "**Image URI:** \`${{ needs.build-and-push.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** Amazon ECR Public" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÄ AMI" >> $GITHUB_STEP_SUMMARY
        echo "**AMI ID:** \`${{ steps.create-ami.outputs.ami-id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** \`${ENVIRONMENT}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** \`${{ env.AWS_REGION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Usage" >> $GITHUB_STEP_SUMMARY
        echo "Launch EC2 instances from this AMI to run the multi-tenant ComfyUI system." >> $GITHUB_STEP_SUMMARY
        echo "The management server will be available on port 80." >> $GITHUB_STEP_SUMMARY